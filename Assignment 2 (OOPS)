# Que 1: Explain the importance of functions.
Functions are blocks of reusable and organised code that usually perform a single, related action. 
They are a crucial part of programming because they save you a lot of time and make the code cleaner.
It eliminates redudancy and make larger code more efficient and easier to maintain.

# Que 2: Write a basic function to greet a student.
def _my_func_greet():
  print("Hello , Welcome to PW Skills Assignment 2" + "\n"+"Nice to meet you")

_my_func_greet()

# Que 3: What is the difference between return and print statement.
Return : 
(1) It is used to exit a function and return a value.
(2) It returns a value that can be assigned to a variable or used in any expression.
(3) It can be used multiple times in a function but only one value can be returned at a time.
(4) Exiting the function with return ends the function and control returns to calling code.

Print:
(1) It is used to display output to the console.
(2) It displays output to the console but does not return the value.
(3) It can be used multiple times in a function but does not affect the functionâ€™s return value.
(4) The print does not affect program flow and execution continues normally.

# Que 4: What are *args and **kwargs?
*args is known as variable length argument which means that it allows a function to accept any number of positional arguments i.e. arguments that are non-keyword arguments.
If we are not sure about the numbers of paramets t pass through a function then we can use *args.

**kwargs allows us to pass a variable number of keyworded arguments to the function.
*args has limitation to not accept data as dictionary , in that case **kwargs can be used to pass keywords and associated data values of keywords through a function.

# Que 5: What is iterator ?
An iterator is an object that can be iterated upon, meaning that you can traverse through all the values.
It has methods __iter__() and __next__().
__iter__(): Called to initialize the iterator. It must return an iterator object.
__next__(): Called to iterate over the iterator. It must return the next value in the data stream.

# Que 6 : Write a code to generate square root of number from 1 to n using generator.
def square_num (num):
  for i in range (1,num+1):
   yield i ** 2
    
num = int(input("Enter Number: "))
Gen_Sq = square_num(num)
for i,square_root in enumerate(Gen_Sq):
  print(square_root)

# Que 7 : Write a code to that generated palindromic numbers upto n using a generator.


# Que 8 : Write a code that generates even numbers from 2 to n using a generator.

def even_num (num):
  for i in range (2,num+1):
    if i%2 == 0:
      yield i
    
num = int(input("Enter Number: "))
Gen_even = even_num(num)
for i,even_number in enumerate(Gen_even):
  print(even_number)

#Que 9 : Write a code that generates powers of two up to n using a generator.

def display_powers_of_2(exp):
    for i in range(exp+1):
        yield 2**i

# Que 10 : Write a code that generates prime numbers upto n using a generator.

def prime_number(num):
    for i in range(2,num):
      if num%i == 0 :
        return False
    return True
        
def _prime (num1):
  for i in range(2,num1):
    if prime_number(i):
      yield i

num1 = int(input("Enter the limit to check whether number is prime: "))

gen_prime = _prime(num1)
for i,prime_print in enumerate(gen_prime):
  print(prime_print)

        

exp = int(input("Enter the number of powers of 2 to display: "))
gen_pow = display_powers_of_2(exp)
for i,power in enumerate(gen_pow):
  print(power)

# Que 11: Write a lamba function to calculate sum of two numbers.


x = int(input("Enter num1: "))
y = int(input("Enter num2: "))

_SUM =  lambda x,y: x+y
_result = _SUM(x,y)
print("The sum of the two numbers is:",_result)
