#Que1: Write a code to reverse a string
original_name = "Karandeep Kaur"
reverse_name=original_name[::-1]
reverse_name

#Que 2:Write a code to count the number of vowels in a string

_string = input("Enter string:")
_count_vowels=0
for i in range(0,len(_string)):
  if _string[i] in ('a','e','i','o','u','A','E','I','O','U'):
    _count_vowels=_count_vowels+1
print(_count_vowels)

# Que 3: Write code to check if given string is palindrome or not.
_string = input("Enter string:" )
_string = _string.lower()
_reverse_string = _string[::-1]
_forward_string = _string[0::]
if (_reverse_string == _forward_string):
  print ("The given string is palindrome:", _string)
else:
  print("The given string is not palindrom:" , _string)

#Que 4 : Write a code to check if two given strings anagram of each other
_string1 = "listen"
_string2 = "silent"
_string_new1 = _string1.lower()
_string_new2 = _string2.lower()
_string_new1 = sorted(_string_new1)
_string_new2 = sorted(_string_new2)
if _string_new1==_string_new2:
  print("The given string is anagram:" , _string1,",",_string2)
else:
  print("The given string2 is not anagram:" , _string1,",", _string2)


#Que 5 : Write a code to find all occurrences of ' given substring within another string.
_string = "manmanman"
_sub_string= "man"
_string_count=_string.count(_sub_string,None,None)
print("The count of substring in string is :",_string_count,"and substring is :" , _sub_string)

#Que 6 : Write a code to perform basic string compression using the count of repeated characters.
#aabbbccccddd -> a2b3c4d3
_string = "aaadddeegggff"
count = 1
for i in range(1,len(_string)):
  if (_string[i]==_string[i-1]):
    count= count+1
    
  else:
    print(_string[i-1],":", count,",",end =" ")
    count = 1

print(_string[-1],":",count)

#Que 7: Write a code to determine if string has all unique charater.
_string = "Karandeep Kaur"
_char = []
_string1=_string.lower()
_string1 = sorted(_string1)
for i in _string1:
  if i in _char:
    itr=1
    break
    
  else:
    _char.append(i)
    itr = 0
if itr == 1:
  print ("The string does not contains unique characters: ",_string)
else:
  print("The string contains unique characters: ",_string)

#Que 8 :Write a code to convert given string to upper or lower case.

_string_lower = input("Enter string: ")
_string_lower = _string_lower.lower()
print("The string in lower case: ",_string_lower)

_string_upper = input("Enter string: ")
_string_upper = _string_upper.upper()
print("The string in upper case: ",_string_upper)

# Que 9: Write a code to count the number of words in string

_string= "Hi My name is karandeep"
_string_count = len(_string.split())
print("The count of number of words in string: ",_string_count)

# Que 10 : Write a code to concatenate two strings without using the + operators.
_string1 = "My name is Karandeep."
_string2 = "I am an Engineer."

print("The concatenated string is: ","%s%s" % (_string1,_string2))

# Que 11: Write a code to remove all occurrences of specific element from a list
_list = ['ABC','123','XYZ','ABC']
_element = 'ABC'

while _element in _list:
  _list.remove(_element)

print(_list)

# Que 12: Implement a code to find the second largest number in given list of integer

_list = [23,95,45,67,12,89,95,90]
_list = sorted(_list)
_lar_list = list(set(_list))
print("The second largest number in given list of integer: ",_lar_list[-2])

#Que 13 : create a code to count the occurrences of each element in a list and return a dictionary with elements as keys and their count as value

_list =[23,23,14,67,89,34,12,56,34]
_dict = {}
for i in _list:
  if i in _dict:
    _dict[i]+=1
  else:
    _dict[i]=1

print("The count of occurrences of each element: ",_dict)

#Que 14 : Write a code to reverse a list in place without using any built in reverse functions.

_list = ['abc',23,'xyz','ybf',34]
_reverse_list = _list[::-1]

print("The reverse list: ",_reverse_list)

#Que 15: Implement a code to find and remove duplicate from  a list while preserving the original order of element

_list = [23,5,67,23,67,45,34,24]
_remove_dup = []
for i in _list:
  if i not in _remove_dup:
    _remove_dup.append(i)
print("The list after removing duplicates: ",_remove_dup)

#Que 16:Create a code to check if given list is sorted (either in ascending or descending order) or not

_list = [67,56,34,21]
_asc_list = sorted(_list)
_dsc_list = sorted(_list,reverse = True)

if _asc_list == _list:
  print("The list is in ascending order:",_list)

elif _dsc_list == _list:
  print("The list is in descending order:",_list)

else:
  print("The list is not in order:",_list)

#Que 17: Write a code to merge two sorted list into a single sorted list

_list1 = [23,34,56,73,78]
_list2 = [67,68,79,91,98]

_list_final = sorted(_list1+_list2)
print (_list_final)

#Que 18: Implement a code to find the intersection of two given lists

_list1 = [23,45,65,78,98]
_list2 = [45,56,67,65,78,98]
_list3 =[]
for i in _list1:
  if i in _list2:
    _list3.append(i)

print(_list3)

#Que 19:Create a code to find the union of two lists without duplicates
_list1 = [23,56,67,56,89,90,65,91]
_list2 = [34,56,67,23,90,56,89]

_list_union = _list1+_list2
_list_union_unq = sorted(list(set(_list_union)))
print(_list_union_unq)

#Que 20: Write a code to shuffle a given list randomly without using any built-in shuffle function.
import random

_list = ['123',45,'Abc',76,'xyz']
_shuffle_list = random.sample(_list,len(_list))
print(_shuffle_list)

#Que 21: Write a code that takes two tuples as input and return a new tuple containing elements that are common to both input tuples.
_tuple1 = (12,45,67,'abc',78,23)
_tuple2 = (34,56,78,45,67,23,'abc')
_tuple1_set = set(_tuple1)
_tuple2_set = set(_tuple2)

_common = tuple(_tuple1_set & _tuple2_set)

print("The common element: ",_common)

#Que 22: Create a code that prompts the user to enter two sets of integers seperated by commas.Then print the intersection of these two sets.
_set1 =input("Enter set1: ") #23,24,56,34,57
_set2 =input("Enter set2 ") #5,67,87,34,65,57
_set1=set(_set1.split(","))
_set2=set(_set2.split(","))

_set3 = _set1.intersection(_set2)

print("The intersection of these two sets: ",set(_set3))

#Que 23: Write a code to concatenate two tuples. The function should take two tuples as input and return a new tuple containing elements from both input tuples.
def my_function(_tuple1,_tuple2):

  _tuple_con = "("+_tuple1+"," + _tuple2 + ")"
  print(_tuple_con)


my_function(_tuple1 = input("Enter tuple list 1 : ") #(23,45,67,89)
,_tuple2 = input("Enter tuple list 2 : ")) # (34,56,87,98)

# Que 24: Develop a code that prompts the user to input two sets of strings. Then  print the elements that are present in the first set but not in the second set.
_set_str1 = input("Enter string1: ")
_set_str2 = input("Enter string2: ")
_set_str1 = set(_set_str1)
_set_str2 = set(_set_str2)
_set3 = _set_str1-_set_str2
print(_set3)

# Que 25 : Create a code that takes a tuple and two integers as input. The function should return a new tuple containing elements from the original tuple within the specified range of indices.
#def _my_function(_tuple1,_int_range1,_int_range2):
def _my_function():

  _tuple1 = (23,56,69,78,67)
  _int_range1 = 1
  _int_range2 = 5
  if (_tuple1[_int_range1:_int_range2]) == ():
    tuple3 = _tuple1[_int_range2:_int_range1]

  else:
    tuple3 =  _tuple1[_int_range1:_int_range2]
  return  tuple3

_my_function(
    #_tuple1= tuple(input("Enter Tuple: ").split(",")),
    #_int_range1=int(input("Enter Int value 1: ")),
    #_int_range2=int(input("Enter Int value 2: "))
    
)

#OR

def _my_function(_tuple1,_int_range1,_int_range2):
#def _my_function():

  #_tuple1 = (23,56,69,78,67)
  #_int_range1 = 1
  #_int_range2 = 5
  if (_tuple1[_int_range1:_int_range2]) == ():
    tuple3 = _tuple1[_int_range2:_int_range1]

  else:
    tuple3 =  _tuple1[_int_range1:_int_range2]
  return  tuple3

_my_function(
    _tuple1= tuple(input("Enter Tuple: ").split(",")),
    _int_range1=int(input("Enter Int value 1: ")),
    _int_range2=int(input("Enter Int value 2: "))
    
)

# Que 26: Write a code that prompts the user to input two sets of characters. Then print the union of these  two sets.
_set1 = input("Enter input1: ")
_set2 = input("Enter input1: ")
_set1 = _set1.split(",")
_set2 = _set2.split(",")
_set1 =set(_set1)
_set2 = set(_set2)

_set_union = _set1.union(_set2)
print(_set_union)

#Que 27 :Develop a code that takes tuple of integers as input. The function should return the maximum and minimum values from the tuple using tuple unpacking.
def _my_function (_tuple1):
  tuple_min = str(min(_tuple1))
  tuple_max = str(max(_tuple1))
  tuple_con = tuple_min +"," + tuple_max
  tuple_sep = tuple_con.split(",")
  tuple_min,tuple_max = tuple_sep
  print("The minimum value is: ",tuple_sep[0]+"\n"+"The maximum value is: ",tuple_sep[1]+"\n"+"The tuple is: ",tuple(tuple_sep))

_my_function(
   _tuple1= tuple(input("Enter input:").split(","))    #45,78,90,34,95         
)


# Que:28 Create a code that defines two sets of integers. Then print the union, intersection and difference of these two sets.

_set1 = input("Enter input 1: ").split(",")
_set2 = input("Enter input 2: ").split(",")
_set1 = set(_set1)
_set2 = set(_set2)

_union = _set1.union(_set2)
_intersection = _set1.intersection(_set2)
_difference = _set1.difference(_set2)
_union = str(_union)
_intersection = str(_intersection)
_difference = str(_difference)
print("The union of sets:",_union +"\n"+"The intersection of sets: ",_intersection +"\n"+"The difference of sets: ", _difference)

